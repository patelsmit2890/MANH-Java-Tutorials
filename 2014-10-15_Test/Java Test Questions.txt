1) Write a program to grade a short multiple-choice quiz. The correct answers for	(10 Marks)
the quiz are:
1. C 5. B
2. A 6. C
3. B 7. C
4. D 8. A
Assume that the pass marks are 5 out of 8. The program stores the correct
answers in an array. The submitted answers are specified as program arguments.
Let X represent a question that was not answered on the quiz. Use an
enum type to represent the result of answering a question.
The program calculates and prints a report along the following lines:
Question Submitted Ans. Correct Ans. Result
1 C C CORRECT
2 B A WRONG
3 B B CORRECT
4 D D CORRECT
5 B B CORRECT
6 C C CORRECT
7 A C WRONG
8 X A UNANSWERED
No. of correct answers: 5
No. of wrong answers: 2
No. of questions unanswered: 1
The candidate PASSED.

2) Design a class for a bank database. The database should support the following
operations:

	* deposit a certain amount into an account
	* withdraw a certain amount from an account
	* get the balance (i.e., the current amount) in an account
	* transfer an amount from one account to another

The amount in the transactions is a value of type double. The accounts are identified
by instances of the class Account that is in the package com.citicorp.records.
The database class should be placed in a package called com.citicorp.system.

The deposit, withdraw, and balance operations should not have any implementation,
but allow subclasses to provide the implementation. The transfer operation
should use the deposit and withdraw operations to implement the transfer.
It should not be possible to alter this operation in any subclass, and only classes
within the package com.citicorp.system should be allowed to use this operation.
The deposit and withdraw operations should be accessible in all packages.
The balance operation should only be accessible in subclasses and classes within
the package com.citicorp.system.

3) Declare an interface called Function that has a method named evaluate that takes
an int parameter and returns an int value.

Create a class called Half that implements the Function interface. The implementation
of the method evaluate() should return the value obtained by dividing
the int argument by 2.

In a client, create a method that takes an arbitrary array of int values as a parameter,
and returns an array that has the same length, but the value of an element
in the new array is half that of the value in the corresponding element in the
array passed as the parameter. Let the implementation of this method create an
instance of Half, and use this instance to calculate values for the array that is
returned.